大思路
UIPanel,UIWidget,UIDrawCall,UIGeometry这四个类之间的关系,UIPanel内的UIWidget排序触发时机,DC构建细节,DC更新细节
UIRect,UIWidget,UIBasicSprite,UISprite,UITexture,UILabel,渲染数据构建细节,和各个UIRect派生类有关,构建时如何复用内存,如何减少GC,如何减少更新次数,和DC关系
锚点和变换矩阵(位置更新),更新时机,
UIPanel的裁剪,UIScrollView的滑动,
UIRoot屏幕适配,
NGUI事件判定流程,UICamera

整合名字版渲染方案到NGUI里,对上层提供一个脚本,挂在GameObject上,默认该节点以及其所有子节点们使用新渲染方案,该GameObject在UI上是一个独立单位,参考名字版用法,不和NGUI其他组件发生关联
编辑器非运行状态下导出一份该GameObject对应的网格数据,运行时针对sprite和label都有单独的更新函数,每个sprite和label都有唯一编号,该编号是可视化和非可视化的桥梁,也是上层业务调用各种方法的凭证
可视化是编辑器非运行状态下Inspector视图,非可视化是网格数据
和UIDrawCall的关系是重点,再有和UIRoot的适配

UIRect ： MonoBehaviour
	介绍：抽象类,继承自MonoBehaviour,是NGUI框架的根基类
	枚举：
			+AnchorUpdate:
				OnEnable,
				OnUpdate,
				OnStart,
	实例字段：
			+leftAnchor:AnchorPoint,
			+rightAnchor:AnchorPoint,
			+bottomAnchor:AnchorPoint,
			+topAnchor:AnchorPoint,
			
			+updateAnchors:AnchorUpdate = AnchorUpdate.OnUpdate,
			
			#mGo:GameObject,
			#mTrans:Transform,
			#mChildren:BetterList<UIRect>,UIRect所属的所有子UIRect脚本实例,
			#mChanged:bool = true,主要在UIWidget.UpdateGeometry方法里做判定依据,UIRect派生类里触发该字段为true的情况如下,
									有UIBasicSprite(fillDirection,fillAmount,invert),UISprite(spriteName),UILabel(ProcessText),UIWidget(UpdateVisibility),
			#mParentFound:bool = false,是否已经找到父UIRect节点,多个地方置为false,如UIRect.OnInit方法里,UIRect.OnDisable方法里,UIRect.ParentHasChanged方法里,UIWidget.CreatePanel方法里,
										意为需要重新查找父UIRect节点,但并没有真的查找,而是在访问UIRect.parent属性时判断如果为false则重新查找,
			#mParentFound:bool = false,
			-mUpdateAnchors:bool = true,
			-mUpdateFrame:int = -1,
			-mAnchorsCached:bool = false,
			-mRoot:UIRoot,该UIRect所属的UIRoot,
			-mParent:UIRect,父UIRect节点,每次访问UIRect.parent属性时选择性查找最新的
			-mRootSet:bool = false,是否找到UIRect所属的UIPanel,UIRect.root会递归向父UIRect节点遍历,最后起作用的是UI Root节点上的UIPanel脚本实例的UIRect.mRootSet字段
			#mCam:Camera
			
			#mStarted:bool = false,
			+finalAlpha:float = 1f,充当渲染数据最终的alpha,由UICamera.Raycast使用,由UIWidget.UpdateFinalAlpha和UIPanel.CalculateFinalAlpha两个方法更新,
			
	实例属性：
			+cachedGameObject:GameObject,get
			+cachedTransform:Transform,get
			+anchorCamera:Camera,get
			+isFullyAnchored:bool,get
			virtual +isAnchoredHorizontally:bool,get
			virtual +isAnchoredVertically:bool,get
			virtual +cabBeAnchored:bool,get
			+parent:UIRect,get,当前UIRect的父UIRect节点,先判定mParentFound为false则重新查找并标记mParentFound为true,查找结果存储在UIRect.mParent字段,最后返回mParent
			+root:UIRoot,get,以向父UIRect节点递归的方式循环,直到遇到UI Root节点,再获取UIRoot脚本,存储在UIRect.mRoot字段,并返回,UIPnel和UILabel两个类用的多
			+isAnchored:bool,get
			abstract +alpha:float,get set,local alpha,UIWidget的派生类对alpha有不同的计算方式以及使用方式
			abstract +Vector3[] localCorners,get
			abstract +Vector3[] worldCorners,get
			#cameraRayDistance:float,
	实例方法：
			+abstract float CalculateFinalAlpha(int frameID),UIWidget和UIPanel两个直接派生类重写了该方法,用于计算UIRect.finalAlpha（递归形式考虑父节点）
			+virtual Invalidate(bool includeChildren),使该UIRect无效,将UIRect.mChanged置为true,并判断是否需要遍历子节点,如alpha改动则includeChildren为true,颜色变化则为false,
													UIRect派生类覆写该方法并添加逻辑
			+virtual ParentHasChanged(),当UIRect的父UIRect节点发生改变时调用该方法,标记mParentFound为false,查找新父UIRect节点,新旧parent不等则把该UIRect从旧parent.mChildren里删除,
										并添加到新parent.mChildren里,并置mRootSet为false,意为重新找UIRoot
	静态字段：
			#mSides:Vector3[],避免GC的临时变量
	静态方法：
	
	AnchorPoint
		介绍：UIRect类内的public class,
		实例字段：
				+target:Transform,
				+relative:float,
				+absolute:int,
				+rect:UIRect,
				+targetCam:Camera,
		实例方法：
				+AnchorPoint(),
				+AnchorPoint(float relative),
				+Set(float relative, int absolute),
				+Set(Transform target, float relative, int absolute),
				+SetToNearest(float abs0, float abs1, float abs2),
				+SetToNearest(float rel0, float rel1, float rel2, float abs0, float abs1, float abs2),
				+SetHorizontal(Transform target, float localPos),
				+SetVertical(Transform target, float localPos),
				+Vector3[] GetSides(Transform relativeTo),
		静态字段：
		静态方法：

UIWidget : UIRect
	介绍：
	实例字段：
			+panel:UIPanel,UIWidget所属的UIPanel,通过UIWidget.CreatePanel方法查找,在计算UIWidget的depth时,会用到该字段
			+geometry:UIGeometry,每个UIWidget都有一个UIGeometry,用于存储UIWidget网格数据
			#mPlayMode:bool = true,任意player或编辑器运行状态为true,编辑器非运行状态为false,用于在编辑器非运行环境下的即时逻辑
			+mLocalToPanel:Matrix4x4,把UIWidget顶点位置由UIWidget局部空间转换到所属UIPanel局部空间,重建网格数据和移动都会触发使用该字段
			-mIsVisibleByAlpha:bool = true,按alpha来看该UIWidget是否可见,大于0.001即为可见,UIWidget.UpdateVisibility方法里对该字段更新,在UIWidget.UpdateGeometry方法里使用,
			-mIsVisibleByPanel:bool = true,按UIPanel来看该UIWidget是否可见,被完全裁剪了不可见,由UIWidget.UpdateVisibility方法对该字段更新,和mIsVisibleByAlpha一起贡献isVisible部分因子,
			-mLastAlpha:float = 0f,在UIWidget.UpdateGeometry方法里使用,承接UIWidget.CalculateFinalAlpha(frame)返回值,并用来判断当前frame的finalAlpha和上一次的finalAlpha相比是否有改变
	实例属性：
			+isVisible:bool,get,UIWidget对外的总可见性,由UICamera.Raycast使用,UIPanel的FindDrawCall,FillDrawCall,FillAllDrawCalls三个方法使用,
							由mIsVisibleByAlpha,mIsVisibleByPanel,mIsInFront,UIRect.finalAlpha,NGUITools.GetActive(this)这几部分共同组成,
	实例方法：
			+override float CalculateFinalAlpha(int frameID),内部调用了UpdateFinalAlpha(int frameID)方法,计算出UIRect.finalAlpha,并返回
			#UpdateFinalAlpha(int frameID),以递归形式考虑父节点的UIRect.finalAlpha,并乘以UIWidget的UIWidget.mColor.a,相乘结果存到UIWidget的UIRect.finalAlpha里,供后续逻辑使用
			+override Invalidate(bool includeChildren),mChanged置为true,mAlphaFrameID置为-1,如果有所属UIPnel,则调用UIWidget.UpdateVisibility(bool visibleByAlpha, bool visibleByPanel),
													调用UIWidget.UpdateFinalAlpha(int frameID),并选择性的调用基类
			+SetDirty(),如果UIWidget.drawCall不为null,则将UIWidget.drawCall.isDirty置为true;如果UIWidget.drawCall为null,则调用UIWidget.CreatePanel方法为UIWidget创建UIWidget.panel字段
			+RemoveFromPanel(),把该UIWidget从所属UIPanel删除,并置UIWidget.panel和UIWidget.drawCall两个字段为null,
			+CreatePanel():UIPanel,为该UIWidget查找所属UIPanel,如果没有找到则创建,把UIWidget添加到UIPanel维护的UIWidget列表,mParentFound置为false是为了找父UIRect节点,并调用UIWidget.Invalidate(true),
							在访问UIWidget的时发现没有所属UIPanel,则调用该方法,如返回raycastDepth属性时发现没所属UIPanel,SetDirty时发现没有drawCall,父节点发生改变后,OnStart方法里等
			+override ParentHasChanged(),除了调用base.ParentHasChanged外,如果还更新了所属UIPanel,则调用RemoveFromPanel和CreatePanel两个方法,重新找所属UIPanel
			+UpdateVisibility(bool visibleByAlpha, bool visibleByPanel),更新(存在一个不同)UIWidget的mIsVisibleByAlpha和mIsVisibleByPanel,并置UIRect.mChanged为true,
			+UPdateGeometry(int frame),更新UIWidget,选择性填充UIWidget.geometry,并返回是否有更新,UIPanel.UpdateWidgets方法里调用
            +WriteToBuffers(List<Vector3> v, List<Vector2> u, List<Color> c, List<Vector3> n, List<Vector4> t, List<Vector2> u2),内部调用UIWidget.geometry.WriteToBuffers(v, u, c, n ,t, u2)
	静态字段：
	静态方法：
			+int PanelCompareFunc(UIWidget left, UIWidget right),UIPanel内的所有UIWidget排序方法,按照UIWidget.mDepth从小到大的顺序,如果UIWidget.mDepth相同,则有材质的在前,无材质的在后,在UIPanel内使用
			+int FullCompareFunc(UIWidget left, UIWidget right),完全考虑所有排序因素,先是判断两个UIWidget所属的UIPanel的depth,按照从小到大,
																如果处于同一个UIPanel则使用PanelCompareFunc方法,在NGUITools和NGUIEditorTools里各有一处使用
	疑问：
		UIRect.finalAlpha为什么和UIWidget.mIsVisibleByAlpha共存,两者有各自不同的需求么?
UIBasicSprite : UIWidget
	介绍：UISprite和UITexture的基类,只有网格数据填充细节,和影响网格填充细节的字段
	枚举：
			+Type:
				Simple,
				Sliced,
				Tiled,
				Filled,
				Advanced,
			+FillDirection:
				Horizontal,
				Vertical,
				Radial90,
				Radial180,
				Radial360,
			+AdvancedType:
				Invisible,
				Sliced,
				Tiled,
			+Flip:
				Nothing,
				Horizontally,
				Vertically,
				Both,
	实例字段：
			#mType:Type = Type.Simple,UIBasicSprite的外在表现,有普通,九宫格,平铺,填充等
			#mFillDirection:FillDirection = FillDirection.Radial360,填充方向,只有mType是Type.Filled时才有用
			#mFillAmount:float = 1f,填充比例,只有mType是Type.Filled时才有用
			#mInvert:bool = false,是否翻转填充方向,只有mType是Type.Filled时才有用
			#mFlip:Flip = Flip.Nothing,翻转类型,有水平,垂直,都有,都不,mType取Type.Advanced外,都有该值可选,本质是翻转了uv
			#mApplyGradient:bool = false,是否应用渐变效果,mType取Type.Simple和Type.Sliced时才有效,只支持上下渐变
			#mGradientTop:Color = Color.white,渐变色上,mApplyGradient为true时有效
			#mGradientBottom:Color = new Color(0.7f, 0.7f, 0.7f),渐变色下,mApplyGradient为true时有效
			-mInnerUV:Rect,对于UIBasicSprite(UISprite和UITexture)来说,四条border边界围起来的区域,在图集纹理或单独纹理区域的UV值,私有变量,由派生类计算得出后只在该类里构建网格数据的UV使用
			-mOuterUV:Rect,对于IUBasicSprite(UISprite和UITexture)来说,UISpriteData的x,y,width,height四个值围起来的区域,在图集纹理或单独纹理区域的UV值
	实例属性：
			+virtual type:Type,get,set,有效set触发UIWidget.MarkAsChanged方法
			+flip:Flip,get,set,有效set触发UIWidget.MarkAsChanged方法
			+fillDirection:FillDirection,get,set,有效set置mChanged为true
			+fillAmount:float,get,set,有效set置mChanged为true
			+override minWidth:int,get,如果mType为Type.Sliced或Type.Advanced,计算border的左右边界和,+1的方式把奇变成偶,再和UIWidget.minWidth比大小,取较大值,
										如果mType是其他类型则直接返回UIWidget.minWidth
			+override minHeight:int,get,同UIBasicSprite.minWidth
			+invert:bool,get,set,有效set置mChanged为true
			+hasBorder:bool,get,是否有border值,四边界但凡有一个不等于0就返回true,否则返回false
			+virtual premultipliedAlpha:bool,get,像素值是否预乘alpha,固定返回false,留给派生类覆写
			+virtual pixelSize:int,get,纹理的像素缩放比例,固定返回1,留给派生类覆写
			#virtual padding:Vector4,get,纹理的周边空余位置尺寸,固定返回Vector4.zero,留给派生类覆写
	实例方法：
	静态字段：
	静态方法：
UISprite : UIBasicSprite
	介绍：
	实例字段：
	实例属性：
	实例方法：
	静态字段：
	静态方法：
	
UITexture : UIBasicSprite
	介绍：
	实例字段：
	实例属性：
	实例方法：
	静态字段：
	静态方法：
	
UILabel : UIWidget
	介绍：
	实例字段：
	实例属性：
	实例方法：
	静态字段：
	静态方法：

UIGeometry
	介绍：UIWidget派生类生成的网格数据存储在UIGeometry里
	实例字段：
			+verts:List<Vector3>,矩阵变换前的顶点位置
			+uvs:List<Vector2>,UV坐标
			+cols:List<Color>,顶点颜色,UIWidget.OnFill方法参数,就是UIWidget.geometry.verts/uvs/cols
			-mRtpVerts:List<Vector3>,矩阵变换到所属UIPanel局部空间后的顶点位置
			-mRtpNormal:Vector3,法线,顶点共享
			-mRtpTan:Vector4,切线,顶点共享
	实例属性：
			+hasVertices bool,get,该UIGeometry是否有顶点数据
			
	实例方法：
			+Clear(),verts/uvs/cols/mRtpVerts,这几个结构都清空
			+ApplyTransform(Matrix4x4 widgetToPanel, bool generateNormals = true),对顶点数据应用矩阵变换到属UIPanel局部空间,包括法线和切线,变换后的顶点存储在mRtpNormal里
			+WriteToBuffers(List<Vector3> v, List<Vector2> u, List<Color> c, List<Vector3> n, List<Vector4> t, List<Vector2> u2),把UIGeometry里维护的矩阵变换后的顶点位置,
						uv,颜色,法线和切线填充到参数里.由UIWidget.WriteToBuffers方法调用
														
																							
	静态字段：
	静态方法：
	
UIDrawCall : MonoBehaviour
	介绍：
	委托：
			+void OnCreateDrawCall(UIDrawCall dc, MeshFilter filter, MeshRenderer ren),
	实例字段：
			+isDirty:bool = false,
			+onCreateDrawCall:OnCreateDrawCall,在一个UIPanel内创建新DC时,该委托被触发,UIPanel.FillAllDrawCalls时把UIPanel.onCreateDrawCall赋值给UIDrawCall.onCreateDrawCall,目前没地方用
	实例属性：
	实例方法：
	静态字段：
	静态方法：
			+Destroy(UIDrawCall dc),如果有onCreateDrawCall则直接UnityEngine.Object.Destroy()并返回,看起来像是dc由外部委托在维护;
									否则如果在运行从mActiveList移除,添加到mInactiveList,隐藏dc.gameObject,并置dc.mIsNew为true;如果是编辑器模式则直接UnityEngine.Object.DestroyImmediate
	
UIPanel : UIRect
	委托：
		+Material OnCreateMaterial(UIWidget widget, Material mat),
		
	介绍：
	实例字段：
			+widgets:List<UIWidget>,该UIPanel所管辖的所有UIWidget,有AddWidget和RemoveWidget两个方法负责更新,外部代码不允许更新,
			+drawCalls:List<UIDrawCall>,由该UIPanel创建的所有UIDrawCall,FillDrawCall和FillAllDrawCalls两个方法构建,SetDirty和alpha遍历isDirty置为true,OnDisable全删除UIDrawCall并清空,
										UpdateSelf里有删除操作,UpdateDrawCalls里做变换,LateUpdate和FindDrawCall里使用,外部代码不允许更新,
			-mRebuild:bool = false,是否重建该UIPanel下的所有DC,除强制性方法Refresh外,仅在AddWidget和RemoveWidget两个方法里可能触发
			-mSortWidgets:bool = false,是否需要对UIPanel所属的UIWidget们重排序,但目前没地方置为true,在公开方法SortWidgets方法里重排了widgets,并置为了false,
			+onCreateMaterial:OnCreateMaterial,为单个widget自定义材质,为了拥有独一的dc,目前没用到,
			+onCreateDrawCall:UIDrawCall.OnCreateDrawCall,对接UIDrawCall.onCreateDrawCall,并对外提供服务,目前没地方用
	实例属性：
			+override alpha,修改后遍历drawCalls并将UIDrawCall.isDirty置为true
	实例方法：
			+override float CalculateFinalAlpha(int frameID),以递归形式考虑父节点的UIRect.finalAlpha,并乘以UIPanel.mAlpha,作为UIPanel的UIRect.finalAlpha
			+SetDirty(),遍历drawCalls并将isDirty置为true,调用Invalidate(true)
			+override ParentHasChanged(),除了调用base.ParentHasChanged外,还调用了UIPanel.FindParent方法,找父UIPanel节点
			#override OnDisable(),遍历drawCalls并删除每个UIDrawCall,清空drawCalls,
			-LateUpdate(),
			-UpdateSelf(),
			+SortWidgets(),对UIPanel内所辖的UIWidget按照UIWidget.PanelCompareFunc比较规则排序,并重置mSortWidgets为false,在编辑器非运行模式下,修改了UIWidget.depth会触发该方法,
			-FillAllDrawCalls(),
			+FillDrawCall(UIDrawCall dc),
			-UpdateDrawCalls(int sortOrder),
			-UpdateWidgets(),
			+UIDrawCall FindDrawCall(UIWidget w),
	静态字段：
	静态方法：
	疑问：
		
			
	
最佳实践：
		尽量不修改UIPanel.alpha


疑问：
	transform.parent更改后,如何执行代码流程,是否和DC的更新有关
		
总结
mesh数据更新
mesh数据有哪些
	颜色(包括alpha),顶点位置(UIRect的pos和size),顶点数量,uv
填充mesh数据细节？
	UISprite,UILabel,UITexture等
上层触发更新的条件？
更新后如何缓存？

备忘
UIPanel.FindParent方法
UIPanel.parentPanel字段
UIBasicSprite.mInnerUV和mOuterUV